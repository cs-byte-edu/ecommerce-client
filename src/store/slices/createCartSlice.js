import { cartService } from "../../api/services/cartService";

export const createCartSlice = (set, get) => ({
  cartItems: [], // —Å–µ—Ä–≤–µ—Ä–Ω–∏–π –∫–æ—à–∏–∫
  cartLoading: false,
  cartError: null,
  guestCartItems: [], // –ª–æ–∫–∞–ª—å–Ω–∏–π –∫–æ—à–∏–∫ (–∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è —á–µ—Ä–µ–∑ persist)
  syncInProgress: false,

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –∫–æ—à–∏–∫–∞
  loadCart: async () => {
    if (!get().isAuthenticated) return;

    // –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ª–æ–≥—ñ–Ω–µ–Ω–∏–π - –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–µ—Ä–≤–µ—Ä–Ω–∏–π –∫–æ—à–∏–∫

    set({
      cartLoading: true,
      cartError: null,
    });

    try {
      const loadCartResponse = await cartService.getCart();
      const cartItems = loadCartResponse.data?.cart_items || [];
      set({
        cartItems,
        cartLoading: false,
      });
    } catch (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ—à–∏–∫–∞: ", error.message);
      set({
        cartError: error.message,
        cartLoading: false,
      });
    }
  },

  addToCart: async (productId, quantity = 1) => {
    console.log(`‚ûï –î–æ–¥–∞—î–º–æ —Ç–æ–≤–∞—Ä ${productId}, –∫—ñ–ª—å–∫—ñ—Å—Ç—å: ${quantity}`);
    if (get().isAuthenticated) {
      try {
        const addTocartResponse = await cartService.addToCart(
          productId,
          quantity
        );
        const cartItems = addTocartResponse.data.updatedCart.cart_items || [];
        set({ cartItems });
      } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä:", error);
        set({ cartError: "–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É" });
      }
    } else {
      // –î–ª—è –≥–æ—Å—Ç–µ–π - –≤ –ª–æ–∫–∞–ª—å–Ω–∏–π –∫–æ—à–∏–∫
      const { guestCartItems } = get();
      const existingItemIndex = guestCartItems.findIndex(
        (item) => item.productId === productId
      );

      if (existingItemIndex !== -1) {
        const updatedItems = [...guestCartItems];
        updatedItems[existingItemIndex].quantity += quantity;
        set({
          guestCartItems: updatedItems,
          cartItems: [...updatedItems],
        });
        console.log("‚úÖ –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É –∑–±—ñ–ª—å—à–µ–Ω–æ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –∫–æ—à–∏–∫—É");
      } else {
        const nextCartItems = [
          ...guestCartItems,
          {
            productId,
            quantity,
            addedAt: new Date().toISOString(),
          },
        ];
        set({
          guestCartItems: [...nextCartItems],
          cartItems: [...nextCartItems],
        });
        console.log("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ –≤ –ª–æ–∫–∞–ª—å–Ω–∏–π –∫–æ—à–∏–∫");
      }
    }
  },

  clearCart: async () => {
    console.log("üßπ –û—á–∏—â—É—î–º–æ –∫–æ—à–∏–∫");

    if (get().isAuthenticated) {
      // –û—á–∏—â—É—î–º–æ —Å–µ—Ä–≤–µ—Ä–Ω–∏–π –∫–æ—à–∏–∫
      set({ cartLoading: true });
      try {
        await cartService.clearCart();
        set({ cartItems: [], cartLoading: false });
      } catch (error) {
        set({ cartError: error.message, cartLoading: false });
      }
    } else {
      // –û—á–∏—â—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π –∫–æ—à–∏–∫
      set({ guestCartItems: [] });
    }
  },

  resetCartItems: () => set({ cartItems: [] }),

  // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –≥–æ—Å—Ç—å–æ–≤–æ–≥–æ –∫–æ—à–∏–∫–∞ –∑ —Å–µ—Ä–≤–µ—Ä–Ω–∏–º
  syncGuestCart: async () => {
    if (!get().isAuthenticated) {
      console.warn("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–∞–ª–æ–≥—ñ–Ω–µ–Ω–∏–π! –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞.");
      return;
    }

    if (get().syncInProgress) {
      console.warn("–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é –∫–æ—à–∏–∫–∞ —É–∂–µ —Ä–æ–∑–ø–æ—á–∞—Ç–æ");
      return;
    }

    /*
      –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–æ–∂–µ –¥–æ–¥–∞–≤–∞—Ç–∏ –¥–æ —Ç–æ–≤–∞—Ä–∏ –¥–æ –≥–æ—Å—Ç—å–æ–≤–æ–≥–æ –∫–æ—à–∏–∫–∞,
      –¥–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∞–±–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó. 
    */
    const { guestCartItems } = get();

    // –Ø–∫—â–æ –∫–æ—à–∏–∫ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —á–∏ –ø–æ—Ä–æ–∂–Ω—ñ–π  -  –∑–∞–≥—Ä—É–∂–∞—î–º–æ —Å–µ—Ä–≤–µ—Ä–Ω–∏–π
    if (!guestCartItems || guestCartItems.length === 0) {
      await get().loadCart();
      return;
    }

    // –ö–æ—à–∏–∫ –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ–π - –ø–æ—á–∏–Ω–∞—î–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é

    set({
      syncInProgress: true,
      cartLoading: true,
      cartError: null,
    });

    try {
      await cartService.syncGuestCart(guestCartItems);

      // –û—á–∏—â—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π –∫–æ—à–∏–∫ —Ç—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
      console.log("üßπ –û—á–∏—â—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π –∫–æ—à–∏–∫ –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó");

      // –ü—ñ—Å–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Å–µ—Ä–≤–µ—Ä–Ω–∏–π –∫–æ—à–∏–∫
      console.log("üì• –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Å–µ—Ä–≤–µ—Ä–Ω–∏–π –∫–æ—à–∏–∫");
      await get().loadCart();
      // set({ guestCartItems: [] });
    } catch (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó: ", error.message);

      set({
        cartError: error.message,
      });

      // –ü—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ –ù–ï –æ—á–∏—â—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π –∫–æ—à–∏–∫
      // –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–æ–∂–µ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑ –∞–±–æ —Ç–æ–≤–∞—Ä–∏ –∑–∞–ª–∏—à–∞—Ç—å—Å—è –ª–æ–∫–∞–ª—å–Ω–æ
      console.warn("‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω–∏–π –∫–æ—à–∏–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó");
      return;
    } finally {
      set({
        cartLoading: false,
        syncInProgress: false,
        guestCartItems: [],
      });
    }
  },
});
